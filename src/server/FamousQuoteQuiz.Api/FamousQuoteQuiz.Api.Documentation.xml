<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FamousQuoteQuiz.Api</name>
    </assembly>
    <members>
        <member name="T:FamousQuoteQuiz.Api.Controllers.QuizController">
            <summary>
            A controller that manages the quiz game.
            </summary>
        </member>
        <member name="M:FamousQuoteQuiz.Api.Controllers.QuizController.GetLastBinaryChoiceQuestion">
            <summary>
            Gets last <see cref="T:FamousQuoteQuiz.Data.Entities.BinaryChoiceQuestion"/>.
            </summary>
            <returns><see cref="T:FamousQuoteQuiz.Data.Entities.BinaryChoiceQuestion"/></returns>
            <response code="200">If there is any <see cref="T:FamousQuoteQuiz.Data.Entities.BinaryChoiceQuestion"/>.</response>
            <response code="404">No questions found.</response>
        </member>
        <member name="M:FamousQuoteQuiz.Api.Controllers.QuizController.GetBinaryChoiceQuestion(System.Int64)">
            <summary>
            Gets <see cref="T:FamousQuoteQuiz.Data.Entities.BinaryChoiceQuestion"/> whose ID is bigger the one received.
            </summary>
            <param name="initialId">
            ID of <see cref="T:FamousQuoteQuiz.Data.Entities.BinaryChoiceQuestion"/> which has to be surpassed.
            </param>
            <returns><see cref="T:FamousQuoteQuiz.Core.Models.BinaryChoiceQuestionViewModel"/></returns>
            <response code="200">If such question exists.</response>
            <response code="400">No existing questions or no more than received.</response>
        </member>
        <member name="M:FamousQuoteQuiz.Api.Controllers.QuizController.GetLastMultipleChoiceQuestion">
            <summary>
             Gets last <see cref="T:FamousQuoteQuiz.Data.Entities.MultipleChoiceQuestion"/>.
            </summary>
            <returns><see cref="T:FamousQuoteQuiz.Data.Entities.MultipleChoiceQuestion"/></returns>
            <response code="200">If there is any <see cref="T:FamousQuoteQuiz.Data.Entities.MultipleChoiceQuestion"/>.</response>
            <response code="404">No questions found.</response>
        </member>
        <member name="M:FamousQuoteQuiz.Api.Controllers.QuizController.GetMultipleChoiceQuestion(System.Int64)">
            <summary>
            Gets <see cref="T:FamousQuoteQuiz.Data.Entities.MultipleChoiceQuestion"/> whose ID is bigger the one received.
            </summary>
            <param name="initialId">
            ID of <see cref="T:FamousQuoteQuiz.Data.Entities.MultipleChoiceQuestion"/> which has to be surpassed.
            </param>
            <returns><see cref="T:FamousQuoteQuiz.Core.Models.MultipleChoiceQuizQuestionViewModel"/></returns>
            <response code="200">If such question exists.</response>
            <response code="400">No existing questions or no more than received.</response>
        </member>
        <member name="M:FamousQuoteQuiz.Api.Controllers.UsersController.Login(FamousQuoteQuiz.Core.Models.LoginUserModel)">
            <summary>
            Login.
            </summary>
            <param name="model">The credentials.</param>
            <returns>A JWT token.</returns>
            <response code="200">If the credentials have a match.</response>
            <response code="400">If the credentials don't match/don't meet the requirements.</response>
        </member>
        <member name="M:FamousQuoteQuiz.Api.Controllers.UsersController.Register(FamousQuoteQuiz.Core.Models.RegisterUserModel)">
            <summary>
            Register.
            </summary>
            <param name="model">The user model.</param>
            <returns>A user model.</returns>
            <response code="201">A user was created.</response>
            <response code="400">Invalid input.</response>
        </member>
        <member name="T:FamousQuoteQuiz.Api.OperationFilters.OptionOperationFilter">
            <summary>
            This operation filter only works on <see cref="T:Optional.Option"/> types that are contained in a class.
            Optional values that are put as type parameters will not be properly displayed in Swagger, although they will work.
            </summary>
        </member>
    </members>
</doc>
